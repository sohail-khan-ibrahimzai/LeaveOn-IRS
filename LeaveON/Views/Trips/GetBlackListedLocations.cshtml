@model IEnumerable<InventoryRepo.Models.Trip>

<style>
  .badge-custom-danger {
    background-color: #f8d7da; /* Light red */
    color: #721c24; /* Dark red */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .badge-custom-success {
    background-color: #d4edda; /* Light green */
    color: #155724; /* Dark green */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .badge-custom-warning {
    background-color: #fff3cd; /* Light yellow */
    color: #856404; /* Dark yellow */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .badge-custom-secondary {
    background-color: #7ba5f7; /* Light gray */
    color: #eaeef5; /* Dark gray */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .scrollable-container {
    height: 23px;
    overflow-y: scroll;
    position: absolute;
    max-width: 122px;
    /* Hide scrollbar for Webkit browsers */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on mobile */
  }

    .scrollable-container::-webkit-scrollbar {
      display: none; /* Hides the scrollbar for Webkit browsers (Chrome, Safari) */
    }

  .scrollable-container {
    -ms-overflow-style: none; /* Hides scrollbar for Internet Explorer and Edge */
    scrollbar-width: none; /* Hides scrollbar for Firefox */
  }

  .badge-custom-danger-td {
    background-color: #f8d7da !important;
    color: #6c757d !important;
  }

  .blacklist-icon {
    position: relative;
    cursor: pointer;
    color: #dc3545; /* Red color for the warning icon */
  }

    /* Tooltip styling */
    .blacklist-icon::after {
      content: attr(data-tooltip); /* Tooltip content */
      position: absolute;
      bottom: 100%; /* Position above the icon */
      left: 50%;
      transform: translateX(-50%);
      background-color: #333;
      color: #fff;
      padding: 5px;
      border-radius: 5px;
      white-space: nowrap;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s ease, visibility 0.2s ease;
      font-size: 12px;
      z-index: 1;
      max-width: 200px; /* Limit the width of the tooltip */
    }

    /* Show tooltip on hover */
    .blacklist-icon:hover::after {
      opacity: 1;
      visibility: visible;
    }

    /* Adjust tooltip position if it overflows */
    .blacklist-icon::after {
      right: 0; /* Align tooltip to the right edge of the parent */
      left: auto; /* Remove left alignment */
      transform: none; /* Remove horizontal translation */
    }

  .openAddressInGoogleMaps {
    cursor: pointer; /* Change cursor to pointer */
    transition: background-color 0.3s; /* Smooth background color change */
    width: 200px; /* Fixed width */
    overflow: hidden; /* Hide overflow content */
    white-space: nowrap; /* Prevent line breaks */
    text-overflow: ellipsis; /* Show ellipsis for overflowing text */
    display: inline-block; /* Enable width on td */
  }

    .openAddressInGoogleMaps:hover {
      background-color: #f0f0f0; /* Light gray background on hover */
    }

  .icon {
    margin-right: 5px; /* Space between icon and text */
    vertical-align: middle; /* Center the icon vertically */
  }

  .scrollable {
    overflow-x: auto; /* Allow horizontal scrolling */
  }
</style>
<div id="NewData">
  <section class="content">
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
          </div>
          <div class="card-body">
            <div id="tripData_wrapper" class="dataTables_wrapper dt-bootstrap4">
              <div class="row">
                <div class="col-sm-12 col-md-6">
                </div>
                <div class="col-sm-12 col-md-6"></div>
              </div>
              <div class="row">
                <div class="col-sm-12">
                  <table id="blacklistedTripTable" class="display" style="width:100%">
                    <thead>
                      <tr>
                        <th style="display:none;">

                        </th>
                        <th style="width:auto;">
                          Location
                        </th>
                        <th style="width:auto;">
                          Blacklist Date
                        </th>
                        <th style="width:auto;">
                          Client Name
                        </th>
                        <th style="width:auto;">
                          Balcklist Reason
                        </th>
                        <th style="width:auto;">
                          Client Number
                        </th>
                        <th style="width:auto;">
                          Location
                        </th>
                        <th style="width:auto;">
                          Floor
                        </th><th style="width:auto;">
                          Bell
                        </th>
                      </tr>
                    </thead>
                    @foreach (var item in Model)
                    {
                      var rowClass = item.Place.IsBlackListed == true ? "badge-custom-danger-td" : "";
                      <tr class="@rowClass">
                        <td style="display:none">
                          @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.Place.Name)
                        </td>
                        <td style="width:auto;">
                          @(item.DateBlackList.HasValue ? item.DateBlackList.Value.ToString("dd/MM/yyyy") : "")
                        </td>
                        <td>
                          @Html.DisplayFor(modelItem => item.Passenger.Name)
                        </td>
                        <td class="scrollable-container" style="width:auto;">
                          @Html.Raw(item.Remarks)
                        </td>
                        <td>
                          @Html.DisplayFor(modelItem => item.Passenger.PhoneNumber)
                        </td>
                        <td class="openAddressInGoogleMaps" id="openAddressInGoogleMap" data-address="@Html.Raw(item.Place.Address)">
                          <i class="fas fa-map-marker-alt icon" aria-hidden="true"></i>
                          @Html.DisplayFor(modelItem => item.Place.Address)
                        </td>
                        <td>
                          @*@Html.DisplayFor(modelItem => item.Floor)*@
                          @Html.DisplayFor(modelItem => item.Place.Floor)
                        </td>
                        <td>
                          @Html.DisplayFor(modelItem => item.Place.Bell)
                          @*@Html.DisplayFor(modelItem => item.Bell)*@
                        </td>
                      </tr>
                    }
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>

<!-- Custom Permission Modal for Google Map -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">Open in Google Maps</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Would you like to open this address in Google Maps?</p>
        <p id="addressToOpen"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmOpenMap">Open Google Maps</button>
      </div>
    </div>
  </div>
</div>

<link href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/buttons/2.1.0/css/buttons.dataTables.min.css" rel="stylesheet" />

@*<script src="https://code.jquery.com/jquery-3.5.1.js"></script>*@
<script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.1.0/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.1.0/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.1.0/js/buttons.print.min.js"></script>

<script type="text/javascript">
  $(document).ready(function () {
    //Current Date with Current Time
    //function getCurrentDayAndDate() {
    //  var now = new Date();
    //  var options = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
    //  return now.toLocaleDateString('en-US', options);
    //}

    //$('#tripTable').DataTable({
    //  //  "paging": false,
    //  //  "lengthChange": false,
    //  //  "pageLength": 100,
    //  //  "searching": false,
    //  //  "ordering": true,
    //  //  "info": false,
    //  //  "autoWidth": true,
    //  //  "responsive": true,
    //  //  "order": [[0, "asc"]]//,
    //  //  //dom: 'Bfrtip',
    //  //  //buttons: [
    //  //  //  'copy', 'csv', 'excel', 'pdf', 'print'
    //  //  //]

    //  //});
    //  "paging": true,
    //  "lengthChange": true,
    //  "pageLength": 100,
    //  "searching": true,
    //  "ordering": true,
    //  "info": true,
    //  rowReorder: {
    //    selector: 'td:nth-child(2)'
    //  },
    //  "responsive": true,
    //  "autoWidth": false,
    //  "language": {
    //    "emptyTable": "No data available for selected date. Please change date."
    //  },
    //  "order": [[0, "desc"]],
    //  //Add lengthChange label below of the table...
    //  /* "dom": '<"top"f>rt<"bottom"lp><"clear">',*/

    //  // Add custom date/day container before search input
    //  "dom": '<"top"<"left-info"><"right"f>>rt<"bottom"lp><"clear">',

    //  //Add space between table and length/pagination controls
    //  "createdRow": function () {
    //    $('<style>.dataTables_wrapper .bottom { margin-top: 15px; }</style>').appendTo('head');
    //  }
    //  //dom: 'Bfrtip',
    //  //buttons: [
    //  //  {
    //  //    extend: 'copyHtml5',
    //  //    exportOptions: {
    //  //      columns: [0, 1, 2, 3, 4, 5, 6]
    //  //    }
    //  //  },
    //  //  {
    //  //    extend: 'csvHtml5',
    //  //    exportOptions: {
    //  //      columns: [0, 1, 2, 3, 4, 5, 6]
    //  //    }
    //  //  },
    //  //  {
    //  //    extend: 'excelHtml5',
    //  //    exportOptions: {
    //  //      columns: [0, 1, 2, 3, 4, 5, 6]
    //  //    }
    //  //  },
    //  //  {
    //  //    extend: 'pdfHtml5',
    //  //    orientation: 'landscape',
    //  //    pageSize: 'LEGAL',
    //  //    exportOptions: {
    //  //      columns: [0, 1, 2, 3, 4, 5, 6]
    //  //    }
    //  //  },
    //  //  {
    //  //    extend: 'print',
    //  //    exportOptions: {
    //  //      columns: [0, 1, 2, 3, 4, 5, 6]
    //  //    }
    //  //  },
    //  //  'colvis'
    //  //]
    //});
    $('#blacklistedTripTable').DataTable({
      "paging": true,
      "lengthChange": true, // length change dropdown will be below the table
      "pageLength": 100,
      "searching": true,
      "ordering": true,
      "info": true,
      rowReorder: {
        selector: 'td:nth-child(2)'
      },
      "responsive": true,
      "autoWidth": false,
      "language": {
        "emptyTable": "No data available for selected date. Please change date."
      },
      "order": [[0, "desc"]],

    });
    $('.openAddressInGoogleMaps').on('click', function () {
      // Get the address from the data attribute
      var address = $(this).data('address');
      $('#addressToOpen').text(address); // Set the address in the modal
      $('#addressModal').modal('show'); // Show the modal
    });

    $('#confirmOpenMap').on('click', function () {
      var address = $('#addressToOpen').text();
      var encodedAddress = encodeURIComponent(address);
      window.open(`https://www.google.com/maps/search/?api=1&query=${encodedAddress}`, '_blank');
      $('#addressModal').modal('hide'); // Hide the modal
    });
    //$('#openAddressInGoogleMap').on('click', function () {
    //  // Get the address from the data attribute
    //  var address = $(this).data('address');

    //  // Confirm with the user
    //  var userConfirmed = confirm("Please open in Google Maps: " + address);
    //  if (userConfirmed) {
    //    // Encode the address for the URL
    //    var encodedAddress = encodeURIComponent(address);
    //    // Open Google Maps with the address
    //    window.open(`https://www.google.com/maps/search/?api=1&query=${encodedAddress}`, '_blank');
    //  }
    //});
  });

  function updateSelectBackground(selectElement) {
    const value = selectElement.value;
    switch (value) {
      case "Success(Not Paid)":
        selectElement.style.backgroundColor = "#f8d7da"; // Light red
        selectElement.style.color = "#721c24"; // Dark red
        break;
      case "Success":
        selectElement.style.backgroundColor = "#d4edda"; // Light green
        selectElement.style.color = "#155724"; // Dark green
        break;
      case "In Progress":
        selectElement.style.backgroundColor = "#fff3cd"; // Light yellow
        selectElement.style.color = "#856404"; // Dark yellow
        break;
      case "Cancel":
        selectElement.style.backgroundColor = "#7ba5f7"; // Light gray
        selectElement.style.color = "#eaeef5"; // Dark gray
        break;
      default:
        selectElement.style.backgroundColor = ""; // Default background
        selectElement.style.color = ""; // Default text color
        break;
    }
  }

  // Initialize background color on page load
  document.addEventListener("DOMContentLoaded", function () {
    const selectElements = document.querySelectorAll(".status-select");
    selectElements.forEach(function (selectElement) {
      updateSelectBackground(selectElement);

      selectElement.addEventListener("change", function () {
        updateSelectBackground(selectElement);
      });
    });
  });
  function handleStatusChange(itemId, selectedStatus) {
    // Logging the values for demonstration
    console.log("Item ID:", itemId);
    console.log("Selected Status:", selectedStatus);

    // You can now use these values to perform actions such as:
    // - Sending an AJAX request to update the status in the database
    // - Displaying a confirmation message
    // - Updating other UI elements
    // Example AJAX call (replace with your actual API endpoint and logic):

    $.ajax({
      url: '/Trips/UpdateStatus/',
      method: 'POST',
      data: {
        id: itemId,
        status: selectedStatus
      },
      success: function (response) {
        console.log('Status updated successfully:', response);
        location.reload();
        // Optionally, update the UI or provide feedback to the user
      },
      error: function (xhr, status, error) {
        console.error('Error updating status:', error);
      }
    });

  }
</script>
