@model IEnumerable<InventoryRepo.Models.Trip>

<style>
  .badge-custom-danger {
    background-color: #f8d7da; /* Light red */
    color: #721c24; /* Dark red */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .badge-custom-success {
    background-color: #d4edda; /* Light green */
    color: #155724; /* Dark green */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .badge-custom-warning {
    background-color: #fff3cd; /* Light yellow */
    color: #856404; /* Dark yellow */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .badge-custom-secondary {
    background-color: #7ba5f7; /* Light gray */
    color: #eaeef5; /* Dark gray */
    padding: 0.5em 1em;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .scrollable-container {
    height: 35px;
    overflow-y: scroll;
    position: absolute;
    max-width: 122px;
    /* Hide scrollbar for Webkit browsers */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on mobile */
  }

    .scrollable-container::-webkit-scrollbar {
      display: none; /* Hides the scrollbar for Webkit browsers (Chrome, Safari) */
    }

  .scrollable-container {
    -ms-overflow-style: none; /* Hides scrollbar for Internet Explorer and Edge */
    scrollbar-width: none; /* Hides scrollbar for Firefox */
  }

  .badge-custom-danger-td {
    background-color: #f8d7da !important;
    color: #6c757d !important;
  }

  /*.blacklist-icon {
    position: relative;
    cursor: pointer;
    color: #dc3545;*/ /* Red color for the warning icon */
  /*}*/

  /* Tooltip styling */
  /*.blacklist-icon::after {
      content: attr(data-tooltip);*/ /* Tooltip content */
  /*position: absolute;
      bottom: 100%;*/ /* Position above the icon */
  /*left: 50%;
      transform: translateX(-50%);
      background-color: #333;
      color: #fff;
      padding: 5px;
      border-radius: 5px;
      white-space: nowrap;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s ease, visibility 0.2s ease;
      font-size: 12px;
      z-index: 1;
    }*/

  /* Show tooltip on hover */
  /*.blacklist-icon:hover::after {
      opacity: 1;
      visibility: visible;
    }*/
  .blacklist-icon {
    position: relative;
    cursor: pointer;
    color: #dc3545; /* Red color for the warning icon */
  }

    /* Tooltip styling */
    .blacklist-icon::after {
      content: attr(data-tooltip); /* Tooltip content */
      position: absolute;
      bottom: 100%; /* Position above the icon */
      left: 50%;
      transform: translateX(-50%);
      background-color: #333;
      color: #fff;
      padding: 5px;
      border-radius: 5px;
      white-space: nowrap;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s ease, visibility 0.2s ease;
      font-size: 12px;
      z-index: 1;
      max-width: 200px; /* Limit the width of the tooltip */
    }

    /* Show tooltip on hover */
    .blacklist-icon:hover::after {
      opacity: 1;
      visibility: visible;
    }

    /* Adjust tooltip position if it overflows */
    .blacklist-icon::after {
      right: 0; /* Align tooltip to the right edge of the parent */
      left: auto; /* Remove left alignment */
      transform: none; /* Remove horizontal translation */
    }
</style>
<div id="NewData">
  <section class="content">
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">
              Trip
              @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
              {
                <a href="@Url.Content("~/Trips/Create")" class="btn btn-warning">Add New</a>
                @*@Html.ActionLink("Add New", "Create", new object { }, new { @class = "btn btn-warning" })*@
              }
            </h3>
          </div>
          <div class="card-body">
            <div id="tripData_wrapper" class="dataTables_wrapper dt-bootstrap4">
              <div class="row">
                <div class="col-sm-12 col-md-6">
                </div>
                <div class="col-sm-12 col-md-6"></div>
              </div>
              <div class="row">
                <div class="col-sm-12">
                  @*<table id="items" class="table table-bordered table-hover dataTable dtr-inline" role="grid" aria-describedby="example2_info">*@
                  <table id="tripTable" class="display" style="width:100%">
                    <thead>
                      <tr>
                        <th style="display:none;">

                        </th>
                        <th style="width:auto;">
                          Total Hours
                        </th>
                        <th style="width:auto;">
                          @*Trip Start Date Time*@
                          Trip Start Time
                        </th>
                        <th style="width: 102px;">
                          Passenger
                        </th>
                        <th style="width:auto;">
                          Cost
                        </th>
                        <th>
                          Driver
                        </th>
                        <th>
                          Driver Profit
                        </th>
                        <th>
                          Manager
                        </th>
                        <th>
                          Manager Profit
                        </th>
                        <th style="width:auto;">
                          Location
                        </th>
                        <th>
                          Comments
                        </th>

                        <!--<th>-->
                        @*Trip End Date Time*@
                        <!--Trip Finish
                        </th>-->
                        <th style="width:auto;">
                          Status
                        </th>
                        <th style="width:auto;">Actions</th>
                        <th></th>
                      </tr>
                    </thead>
                    @foreach (var item in Model)
                    {
                      var rowClass = item.IsBlackListed == true ? "badge-custom-danger-td" : "";
                      <tr class="@rowClass">
                        <td style="display:none">
                          @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.TotalHours)
                        </td>
                        <td>
                          @(item.StartDateTime.HasValue ? item.StartDateTime.Value.ToString("HH:mm:ss tt") : "")
                          @*@(item.StartDateTime.HasValue ? item.StartDateTime.Value.ToString("dd/MM/yyyy HH-mm-ss tt") : "")*@
                          @*@(item.StartDateTime.HasValue ? item.StartDateTime.Value.ToString("dd/MM/yyyy HH-mm-ss") : "")*@
                          @*@Html.DisplayFor(modelItem => item.DateCreated != null ? item.DateCreated.ToString("dd/MM/yyyy") : "")*@
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.Passenger.Name)
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.Cost)
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.Driver.Name)
                        </td>
                        @{
                          // Assuming ViewBag.TotalCostFromViewBag is a decimal
                          decimal totalCost = ViewBag.TotalCostFromViewBag != null ? Convert.ToDecimal(ViewBag.TotalCostFromViewBag) : 0;
                          // Handle nullable CostPerHour and ManagerComission using ?? to provide a default value of 0 if they are null
                          decimal driverCostPerHour = item.Driver.CostPerHour ?? 0;   // If null, default to 0
                          decimal managerComission = item.Passenger.ManagerComission ?? 0; // If null, default to 0
                          // Calculate Driver's profit (CostPerHour is a percentage of total cost)
                          decimal totalDriverProfit = (totalCost * driverCostPerHour) / 100m;
                          // Calculate Manager's profit (ManagerComission is a percentage of total cost)
                          decimal totalManagerProfit = (totalCost * managerComission) / 100m;
                          // Format both profits to show two decimal places
                          string formattedDriverProfit = totalDriverProfit.ToString("F2");
                          string formattedManagerProfit = totalManagerProfit.ToString("F2");
                        }
                        <td style="width:auto;">
                          @formattedDriverProfit
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.AspNetUser.Name)
                        </td>
                        <td style="width:auto;">
                          @formattedManagerProfit
                        </td>
                        <td style="width:auto;">
                          @Html.DisplayFor(modelItem => item.Place.Name)
                        </td>
                        <td class="scrollable-container">
                          @Html.Raw(item.Remarks)
                          @*@Html.DisplayFor(modelItem => item.Remarks)*@
                        </td>
                        <td style="width:auto;">
                          <select class="form-control status-select" onchange="handleStatusChange(@item.Id, this.value)">
                            <option value="Success(Not Paid)" @(item.Status == "Success(Not Paid)" ? "selected" : "") class="badge-custom-danger">Success Not Paid</option>
                            <option value="Success" @(item.Status == "Success" ? "selected" : "") class="badge-custom-success">Succeeded</option>
                            <option value="In Progress" @(item.Status == "In Progress" ? "selected" : "") class="badge-custom-warning">In progress</option>
                            <option value="Cancel" @(item.Status == "Cancel" ? "selected" : "") class="badge-custom-secondary">Cancelled</option>
                          </select>
                        </td>
                        <td style="width:auto;">
                          @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                          {
                            <a href="@Url.Action("Edit", "Trips", new { id = item.Id })" class="btn btn-info">Update</a>
                            @*@Html.ActionLink("Update", "Edit", new { id = item.Id }, new { @class = "btn btn-info" })*@
                          }
                          else
                          {
                            <a href="@Url.Action("Edit", "Trips", new { id = item.Id })" class="btn btn-info">View</a>
                            @*@Html.ActionLink("View", "Edit", new { id = item.Id }, new { @class = "btn btn-info" })*@
                          }
                          @if (User.IsInRole("Admin"))
                          {
                            <a href="@Url.Action("Delete", "Trips", new { id = item.Id })" class="btn btn-danger">Delete</a>}
                          @*{@Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "btn btn-danger" })}*@
                        </td>
                        @*@if (item.Status == "Success(Not Paid)")*@
                        @if (item.IsBlackListed == true)
                        {
                          <td style="width:auto;">
                            <span class="blacklist-icon" data-tooltip="This location has been blacklisted">
                              <i class="fas fa-exclamation-triangle"></i>
                            </span>
                          </td>
                        }
                        else
                        {
                          <td></td>
                        }
                      </tr>
                    }
                  </table>
                  <div id="total-count-container" style="margin-top: 20px;">
                    <p><b>Total Cost for the selected week: <span id="total-cost">0</span></b></p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>
<link href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/buttons/2.1.0/css/buttons.dataTables.min.css" rel="stylesheet" />

@*<script src="https://code.jquery.com/jquery-3.5.1.js"></script>*@
<script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.1.0/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.1.0/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.1.0/js/buttons.print.min.js"></script>

<script type="text/javascript">
  $(document).ready(function () {
    var totalCostFromViewBag = @Html.Raw(ViewBag.TotalCostFromViewBag ?? "0");
    //Current Date with fix time
    function getCurrentDayAndDate() {
      var now = new Date();
      var options = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' };
      var dateString = now.toLocaleDateString('en-US', options);
      //return dateString + ", 08:00 AM";  // Fixed time as 08:00 AM
      return dateString;
    }
    $('#tripTable').DataTable({
      "paging": true,
      "lengthChange": true, // length change dropdown will be below the table
      "pageLength": 100,
      "searching": true,
      "ordering": true,
      "info": true,
      rowReorder: {
        selector: 'td:nth-child(2)'
      },
      "responsive": true,
      "autoWidth": false,
      "language": {
        "emptyTable": "No data available for selected date. Please change date."
      },
      "order": [[0, "desc"]],
      dom: 'Bfrtip',
      buttons: [
        {
          extend: 'csvHtml5',
          exportOptions: {
            columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
          }
        },
        {
          extend: 'excelHtml5',
          exportOptions: {
            columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
          }
        },
        {
          extend: 'pdfHtml5',
          orientation: 'landscape',
          pageSize: 'LEGAL',
          exportOptions: {
            columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
          }
        },
        {
          extend: 'print',
          exportOptions: {
            columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
          }
        }
      ],
      "drawCallback": function (settings) {
        debugger;
        var totalCost = 0;
        totalCost += parseFloat(totalCostFromViewBag);
        $('#total-cost').text(totalCost.toFixed(2));
      }
    });
  });

  function updateSelectBackground(selectElement) {
    const value = selectElement.value;
    switch (value) {
      case "Success(Not Paid)":
        selectElement.style.backgroundColor = "#f8d7da"; // Light red
        selectElement.style.color = "#721c24"; // Dark red
        break;
      case "Success":
        selectElement.style.backgroundColor = "#d4edda"; // Light green
        selectElement.style.color = "#155724"; // Dark green
        break;
      case "In Progress":
        selectElement.style.backgroundColor = "#fff3cd"; // Light yellow
        selectElement.style.color = "#856404"; // Dark yellow
        break;
      case "Cancel":
        selectElement.style.backgroundColor = "#7ba5f7"; // Light gray
        selectElement.style.color = "#eaeef5"; // Dark gray
        break;
      default:
        selectElement.style.backgroundColor = ""; // Default background
        selectElement.style.color = ""; // Default text color
        break;
    }
  }

  // Initialize background color on page load
  document.addEventListener("DOMContentLoaded", function () {
    const selectElements = document.querySelectorAll(".status-select");
    selectElements.forEach(function (selectElement) {
      updateSelectBackground(selectElement);

      selectElement.addEventListener("change", function () {
        updateSelectBackground(selectElement);
      });
    });
  });
  function handleStatusChange(itemId, selectedStatus) {
    // Logging the values for demonstration
    console.log("Item ID:", itemId);
    console.log("Selected Status:", selectedStatus);

    // You can now use these values to perform actions such as:
    // - Sending an AJAX request to update the status in the database
    // - Displaying a confirmation message
    // - Updating other UI elements
    // Example AJAX call (replace with your actual API endpoint and logic):

    $.ajax({
      url: '/Trips/UpdateStatus/',
      method: 'POST',
      data: {
        id: itemId,
        status: selectedStatus
      },
      success: function (response) {
        console.log('Status updated successfully:', response);
        // Optionally, update the UI or provide feedback to the user
      },
      error: function (xhr, status, error) {
        console.error('Error updating status:', error);
      }
    });

  }
</script>
